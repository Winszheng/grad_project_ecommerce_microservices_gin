// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProductClient is the client API for Product service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductClient interface {

	GetProductByFilter(ctx context.Context, in *ProductByFilterRequest, opts ...grpc.CallOption) (*ProductByFilterResponse, error)
	GetProductQuantity(ctx context.Context, in *ProductQuantityRequest, opts ...grpc.CallOption) (*ProductQuantityResponse, error)

	CreateProduct(ctx context.Context, in *CreateProductInfo, opts ...grpc.CallOption) (*ProductInfoResponse, error)
	DeleteProductByID(ctx context.Context, in *ProductID, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateProduct(ctx context.Context, in *CreateProductInfo, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetProductDetailByID(ctx context.Context, in *ProductID, opts ...grpc.CallOption) (*ProductInfoResponse, error)

	GetAllItemList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ItemListResponse, error)

	GetSubItem(ctx context.Context, in *ItemListRequest, opts ...grpc.CallOption) (*SubItemListResponse, error)
	CreateItem(ctx context.Context, in *ItemInfoRequest, opts ...grpc.CallOption) (*ItemInfoResponse, error)
	DeleteItem(ctx context.Context, in *DeleteItemRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateItem(ctx context.Context, in *ItemInfoRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)

	BrandList(ctx context.Context, in *BrandFilterRequest, opts ...grpc.CallOption) (*BrandListResponse, error)
	GetBrand(ctx context.Context, in *BrandRequest, opts ...grpc.CallOption) (*BrandInfoResponse, error)
	CreateBrand(ctx context.Context, in *BrandRequest, opts ...grpc.CallOption) (*BrandInfoResponse, error)
	DeleteBrand(ctx context.Context, in *BrandRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateBrand(ctx context.Context, in *BrandRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)

	ItemBrandList(ctx context.Context, in *ItemBrandFilterRequest, opts ...grpc.CallOption) (*ItemBrandListResponse, error)
	GetBrandListByItem(ctx context.Context, in *ItemInfoRequest, opts ...grpc.CallOption) (*BrandListResponse, error)
	CreateItemBrand(ctx context.Context, in *ItemBrandRequest, opts ...grpc.CallOption) (*ItemBrandResponse, error)
	DeleteItemBrand(ctx context.Context, in *ItemBrandRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateItemBrand(ctx context.Context, in *ItemBrandRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type productClient struct {
	cc grpc.ClientConnInterface
}

func NewProductClient(cc grpc.ClientConnInterface) ProductClient {
	return &productClient{cc}
}

func (c *productClient) GetProductByFilter(ctx context.Context, in *ProductByFilterRequest, opts ...grpc.CallOption) (*ProductByFilterResponse, error) {
	out := new(ProductByFilterResponse)
	err := c.cc.Invoke(ctx, "/Product/GetProductByFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) GetProductQuantity(ctx context.Context, in *ProductQuantityRequest, opts ...grpc.CallOption) (*ProductQuantityResponse, error) {
	out := new(ProductQuantityResponse)
	err := c.cc.Invoke(ctx, "/Product/GetProductQuantity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) CreateProduct(ctx context.Context, in *CreateProductInfo, opts ...grpc.CallOption) (*ProductInfoResponse, error) {
	out := new(ProductInfoResponse)
	err := c.cc.Invoke(ctx, "/Product/CreateProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) DeleteProductByID(ctx context.Context, in *ProductID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Product/DeleteProductByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) UpdateProduct(ctx context.Context, in *CreateProductInfo, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Product/UpdateProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) GetProductDetailByID(ctx context.Context, in *ProductID, opts ...grpc.CallOption) (*ProductInfoResponse, error) {
	out := new(ProductInfoResponse)
	err := c.cc.Invoke(ctx, "/Product/GetProductDetailByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) GetAllItemList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ItemListResponse, error) {
	out := new(ItemListResponse)
	err := c.cc.Invoke(ctx, "/Product/GetAllItemList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) GetSubItem(ctx context.Context, in *ItemListRequest, opts ...grpc.CallOption) (*SubItemListResponse, error) {
	out := new(SubItemListResponse)
	err := c.cc.Invoke(ctx, "/Product/GetSubItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) CreateItem(ctx context.Context, in *ItemInfoRequest, opts ...grpc.CallOption) (*ItemInfoResponse, error) {
	out := new(ItemInfoResponse)
	err := c.cc.Invoke(ctx, "/Product/CreateItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) DeleteItem(ctx context.Context, in *DeleteItemRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Product/DeleteItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) UpdateItem(ctx context.Context, in *ItemInfoRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Product/UpdateItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) BrandList(ctx context.Context, in *BrandFilterRequest, opts ...grpc.CallOption) (*BrandListResponse, error) {
	out := new(BrandListResponse)
	err := c.cc.Invoke(ctx, "/Product/BrandList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) GetBrand(ctx context.Context, in *BrandRequest, opts ...grpc.CallOption) (*BrandInfoResponse, error) {
	out := new(BrandInfoResponse)
	err := c.cc.Invoke(ctx, "/Product/GetBrand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) CreateBrand(ctx context.Context, in *BrandRequest, opts ...grpc.CallOption) (*BrandInfoResponse, error) {
	out := new(BrandInfoResponse)
	err := c.cc.Invoke(ctx, "/Product/CreateBrand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) DeleteBrand(ctx context.Context, in *BrandRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Product/DeleteBrand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) UpdateBrand(ctx context.Context, in *BrandRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Product/UpdateBrand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) ItemBrandList(ctx context.Context, in *ItemBrandFilterRequest, opts ...grpc.CallOption) (*ItemBrandListResponse, error) {
	out := new(ItemBrandListResponse)
	err := c.cc.Invoke(ctx, "/Product/ItemBrandList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) GetBrandListByItem(ctx context.Context, in *ItemInfoRequest, opts ...grpc.CallOption) (*BrandListResponse, error) {
	out := new(BrandListResponse)
	err := c.cc.Invoke(ctx, "/Product/GetBrandListByItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) CreateItemBrand(ctx context.Context, in *ItemBrandRequest, opts ...grpc.CallOption) (*ItemBrandResponse, error) {
	out := new(ItemBrandResponse)
	err := c.cc.Invoke(ctx, "/Product/CreateItemBrand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) DeleteItemBrand(ctx context.Context, in *ItemBrandRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Product/DeleteItemBrand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) UpdateItemBrand(ctx context.Context, in *ItemBrandRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Product/UpdateItemBrand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductServer is the server API for Product service.
// All implementations must embed UnimplementedProductServer
// for forward compatibility
type ProductServer interface {

	GetProductByFilter(context.Context, *ProductByFilterRequest) (*ProductByFilterResponse, error)
	GetProductQuantity(context.Context, *ProductQuantityRequest) (*ProductQuantityResponse, error)

	CreateProduct(context.Context, *CreateProductInfo) (*ProductInfoResponse, error)
	DeleteProductByID(context.Context, *ProductID) (*emptypb.Empty, error)
	UpdateProduct(context.Context, *CreateProductInfo) (*emptypb.Empty, error)
	GetProductDetailByID(context.Context, *ProductID) (*ProductInfoResponse, error)

	GetAllItemList(context.Context, *emptypb.Empty) (*ItemListResponse, error)

	GetSubItem(context.Context, *ItemListRequest) (*SubItemListResponse, error)
	CreateItem(context.Context, *ItemInfoRequest) (*ItemInfoResponse, error)
	DeleteItem(context.Context, *DeleteItemRequest) (*emptypb.Empty, error)
	UpdateItem(context.Context, *ItemInfoRequest) (*emptypb.Empty, error)

	BrandList(context.Context, *BrandFilterRequest) (*BrandListResponse, error)
	GetBrand(context.Context, *BrandRequest) (*BrandInfoResponse, error)
	CreateBrand(context.Context, *BrandRequest) (*BrandInfoResponse, error)
	DeleteBrand(context.Context, *BrandRequest) (*emptypb.Empty, error)
	UpdateBrand(context.Context, *BrandRequest) (*emptypb.Empty, error)

	ItemBrandList(context.Context, *ItemBrandFilterRequest) (*ItemBrandListResponse, error)
	GetBrandListByItem(context.Context, *ItemInfoRequest) (*BrandListResponse, error)
	CreateItemBrand(context.Context, *ItemBrandRequest) (*ItemBrandResponse, error)
	DeleteItemBrand(context.Context, *ItemBrandRequest) (*emptypb.Empty, error)
	UpdateItemBrand(context.Context, *ItemBrandRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedProductServer()
}

// UnimplementedProductServer must be embedded to have forward compatible implementations.
type UnimplementedProductServer struct {
}

func (UnimplementedProductServer) GetProductByFilter(context.Context, *ProductByFilterRequest) (*ProductByFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductByFilter not implemented")
}
func (UnimplementedProductServer) GetProductQuantity(context.Context, *ProductQuantityRequest) (*ProductQuantityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductQuantity not implemented")
}
func (UnimplementedProductServer) CreateProduct(context.Context, *CreateProductInfo) (*ProductInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProduct not implemented")
}
func (UnimplementedProductServer) DeleteProductByID(context.Context, *ProductID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProductByID not implemented")
}
func (UnimplementedProductServer) UpdateProduct(context.Context, *CreateProductInfo) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProduct not implemented")
}
func (UnimplementedProductServer) GetProductDetailByID(context.Context, *ProductID) (*ProductInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductDetailByID not implemented")
}
func (UnimplementedProductServer) GetAllItemList(context.Context, *emptypb.Empty) (*ItemListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllItemList not implemented")
}
func (UnimplementedProductServer) GetSubItem(context.Context, *ItemListRequest) (*SubItemListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubItem not implemented")
}
func (UnimplementedProductServer) CreateItem(context.Context, *ItemInfoRequest) (*ItemInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateItem not implemented")
}
func (UnimplementedProductServer) DeleteItem(context.Context, *DeleteItemRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteItem not implemented")
}
func (UnimplementedProductServer) UpdateItem(context.Context, *ItemInfoRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateItem not implemented")
}
func (UnimplementedProductServer) BrandList(context.Context, *BrandFilterRequest) (*BrandListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BrandList not implemented")
}
func (UnimplementedProductServer) GetBrand(context.Context, *BrandRequest) (*BrandInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBrand not implemented")
}
func (UnimplementedProductServer) CreateBrand(context.Context, *BrandRequest) (*BrandInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBrand not implemented")
}
func (UnimplementedProductServer) DeleteBrand(context.Context, *BrandRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBrand not implemented")
}
func (UnimplementedProductServer) UpdateBrand(context.Context, *BrandRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBrand not implemented")
}
func (UnimplementedProductServer) ItemBrandList(context.Context, *ItemBrandFilterRequest) (*ItemBrandListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ItemBrandList not implemented")
}
func (UnimplementedProductServer) GetBrandListByItem(context.Context, *ItemInfoRequest) (*BrandListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBrandListByItem not implemented")
}
func (UnimplementedProductServer) CreateItemBrand(context.Context, *ItemBrandRequest) (*ItemBrandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateItemBrand not implemented")
}
func (UnimplementedProductServer) DeleteItemBrand(context.Context, *ItemBrandRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteItemBrand not implemented")
}
func (UnimplementedProductServer) UpdateItemBrand(context.Context, *ItemBrandRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateItemBrand not implemented")
}
func (UnimplementedProductServer) mustEmbedUnimplementedProductServer() {}

// UnsafeProductServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductServer will
// result in compilation errors.
type UnsafeProductServer interface {
	mustEmbedUnimplementedProductServer()
}

func RegisterProductServer(s grpc.ServiceRegistrar, srv ProductServer) {
	s.RegisterService(&Product_ServiceDesc, srv)
}

func _Product_GetProductByFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductByFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).GetProductByFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Product/GetProductByFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).GetProductByFilter(ctx, req.(*ProductByFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_GetProductQuantity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductQuantityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).GetProductQuantity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Product/GetProductQuantity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).GetProductQuantity(ctx, req.(*ProductQuantityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_CreateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).CreateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Product/CreateProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).CreateProduct(ctx, req.(*CreateProductInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_DeleteProductByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).DeleteProductByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Product/DeleteProductByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).DeleteProductByID(ctx, req.(*ProductID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_UpdateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).UpdateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Product/UpdateProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).UpdateProduct(ctx, req.(*CreateProductInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_GetProductDetailByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).GetProductDetailByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Product/GetProductDetailByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).GetProductDetailByID(ctx, req.(*ProductID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_GetAllItemList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).GetAllItemList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Product/GetAllItemList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).GetAllItemList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_GetSubItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).GetSubItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Product/GetSubItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).GetSubItem(ctx, req.(*ItemListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_CreateItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).CreateItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Product/CreateItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).CreateItem(ctx, req.(*ItemInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_DeleteItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).DeleteItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Product/DeleteItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).DeleteItem(ctx, req.(*DeleteItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_UpdateItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).UpdateItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Product/UpdateItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).UpdateItem(ctx, req.(*ItemInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_BrandList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrandFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).BrandList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Product/BrandList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).BrandList(ctx, req.(*BrandFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_GetBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).GetBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Product/GetBrand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).GetBrand(ctx, req.(*BrandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_CreateBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).CreateBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Product/CreateBrand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).CreateBrand(ctx, req.(*BrandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_DeleteBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).DeleteBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Product/DeleteBrand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).DeleteBrand(ctx, req.(*BrandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_UpdateBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).UpdateBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Product/UpdateBrand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).UpdateBrand(ctx, req.(*BrandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_ItemBrandList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemBrandFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).ItemBrandList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Product/ItemBrandList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).ItemBrandList(ctx, req.(*ItemBrandFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_GetBrandListByItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).GetBrandListByItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Product/GetBrandListByItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).GetBrandListByItem(ctx, req.(*ItemInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_CreateItemBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemBrandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).CreateItemBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Product/CreateItemBrand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).CreateItemBrand(ctx, req.(*ItemBrandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_DeleteItemBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemBrandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).DeleteItemBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Product/DeleteItemBrand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).DeleteItemBrand(ctx, req.(*ItemBrandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_UpdateItemBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemBrandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).UpdateItemBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Product/UpdateItemBrand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).UpdateItemBrand(ctx, req.(*ItemBrandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Product_ServiceDesc is the grpc.ServiceDesc for Product service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Product_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Product",
	HandlerType: (*ProductServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProductByFilter",
			Handler:    _Product_GetProductByFilter_Handler,
		},
		{
			MethodName: "GetProductQuantity",
			Handler:    _Product_GetProductQuantity_Handler,
		},
		{
			MethodName: "CreateProduct",
			Handler:    _Product_CreateProduct_Handler,
		},
		{
			MethodName: "DeleteProductByID",
			Handler:    _Product_DeleteProductByID_Handler,
		},
		{
			MethodName: "UpdateProduct",
			Handler:    _Product_UpdateProduct_Handler,
		},
		{
			MethodName: "GetProductDetailByID",
			Handler:    _Product_GetProductDetailByID_Handler,
		},
		{
			MethodName: "GetAllItemList",
			Handler:    _Product_GetAllItemList_Handler,
		},
		{
			MethodName: "GetSubItem",
			Handler:    _Product_GetSubItem_Handler,
		},
		{
			MethodName: "CreateItem",
			Handler:    _Product_CreateItem_Handler,
		},
		{
			MethodName: "DeleteItem",
			Handler:    _Product_DeleteItem_Handler,
		},
		{
			MethodName: "UpdateItem",
			Handler:    _Product_UpdateItem_Handler,
		},
		{
			MethodName: "BrandList",
			Handler:    _Product_BrandList_Handler,
		},
		{
			MethodName: "GetBrand",
			Handler:    _Product_GetBrand_Handler,
		},
		{
			MethodName: "CreateBrand",
			Handler:    _Product_CreateBrand_Handler,
		},
		{
			MethodName: "DeleteBrand",
			Handler:    _Product_DeleteBrand_Handler,
		},
		{
			MethodName: "UpdateBrand",
			Handler:    _Product_UpdateBrand_Handler,
		},
		{
			MethodName: "ItemBrandList",
			Handler:    _Product_ItemBrandList_Handler,
		},
		{
			MethodName: "GetBrandListByItem",
			Handler:    _Product_GetBrandListByItem_Handler,
		},
		{
			MethodName: "CreateItemBrand",
			Handler:    _Product_CreateItemBrand_Handler,
		},
		{
			MethodName: "DeleteItemBrand",
			Handler:    _Product_DeleteItemBrand_Handler,
		},
		{
			MethodName: "UpdateItemBrand",
			Handler:    _Product_UpdateItemBrand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "product.proto",
}
